#!/usr/bin/env bash

todo_file=$(git config todo.file)
export todo_file

verbose_commit=$(git config commit.verbose)
export verbose_commit

current_branch=$(git branch --show-current)
export current_branch

main_branch=$(echo $(git symbolic-ref refs/remotes/origin/HEAD 2>/dev/null || echo master) | sed 's@^refs/remotes/origin/@@')
export main_branch

current_branch_origin=$(git merge-base "$main_branch" "$current_branch")
export current_branch_origin

commits_count=$(git rev-list "$current_branch_origin".. --count)
export commits_count

function show_help {
  >&2 echo "Usage: git xit [install|edit|remove|rebase]"
}

function rebase {
  >&2 echo "git xit: rebasing to $current_branch_origin…"
  git rebase -i "$current_branch_origin"
  >&2 echo "         …done"
}

function remove_todo {
  >&2 echo "git xit: removing $todo_file from history…"
  git filter-branch --tree-filter "rm -f $todo_file" "$current_branch"
  >&2 echo "         …done"
}

function edit_todo {
  >&2 echo "git xit: editing $todo_file…"
  "$EDITOR" "$todo_file"
  >&2 echo "         …done"
}

function install_todo {
  if [ -z "$1" ]; then
    >&2 echo "git xit: no filepath given"
    exit 1
  fi
  >&2 echo "git xit: setting \`todo.file\` to $1…"
  git config --local todo.file "$1"
  >&2 echo "         setting \`commit.verbose\` to true…"
  git config --local commit.verbose true
  install_hook "prepare-commit-msg" "git xit prepare-commit-msg-hook"
  install_hook "commit-msg"         "git xit commit-msg-hook"
  install_hook "post-commit"        "git xit post-commit-hook"
  >&2 echo "         …done"
}

function install_hook {
  >&2 echo "         installing $1…"
  hook_path="$(git rev-parse --show-toplevel)/.git/hooks/$1"
  export hook_path
  hook_body="#!/usr/bin/env bash\n$2 \$1"
  export hook_body
  echo -e "$hook_body" > "$hook_path"
  chmod +x "$hook_path"
}

function post_commit_hook {
  if [ -z "$todo_file" ]; then
    echo "git xit: todo file not set up - if you have a todo file, set it up with \`git xit install <file path>\`"
  else
    if [ -f "$todo_file" ]; then
      unresolved=$(sed -n '/\[[ \?]\] .*/p' "$todo_file" | wc -l)
      export unresolved

      echo "git xit: with \`$todo_file\`…"

      if [ "$unresolved" -eq 0 ]; then
        echo "         …you are done with your todo list!"

        if [ "$unresolved" -eq 1 ]; then
          echo "         There is one delivery commit."
        else
          echo "         There are $commits_count delivery commits."
        fi

        echo "         Now you can clean the history up:"
        echo "           git xit rebase"
        echo "         Before pushing, remember to remove the '$todo_file' file from repo:"
        echo "           git xit remove"
      elif [ "$unresolved" -eq 1 ]; then
        echo "         …one item to go:"
        sed -n -e '/\[[ ?]\] /s/.*/             &/p' -e '/^[^\[ ]/s/.*/           &/p' "$todo_file"
      else
        echo "         …$unresolved unresolved issues left:"
        sed -n -e '/\[[ ?]\] /s/.*/             &/p' -e '/^[^\[ ]/s/.*/           &/p' "$todo_file"
      fi
    else
      echo "git xit: todo file '$todo_file' does not exist."
    fi
  fi
}

function commit_msg_hook {
  sed -e '1,/# -\+ >8 -\+/d' -e '/# -\+ 8< -\+/,$d' "$1" > "$todo_file"
}

function prepare_commit_msg_hook {
  sed -ie '/# -\+ >8 -\+/{n;N;d}' "$1"
  sed -ie '/# -\+ >8 -\+/a# ------------------------ 8< ------------------------' "$1"
  sed -ie "/# -\\+ >8 -\\+/r$todo_file" "$1"
}

if [ "$verbose_commit" != "true" ]; then
  >&2 echo "git xit: verbose commits disabled - run \`git xit install <file path>\` to fix that"
  exit
fi

if [ -z "$todo_file" ]; then
  >&2 echo "git xit: todo file not set up - run \`git xit install <file path>\` to fix that"
  exit
fi

case "$1" in
  post-commit-hook)        post_commit_hook ;;
  commit-msg-hook)         commit_msg_hook "$2" ;;
  prepare-commit-msg-hook) prepare_commit_msg_hook "$2" ;;

  install) install_todo "$2" ;;
  edit)    edit_todo ;;
  remove)  remove_todo ;;
  rebase)  rebase ;;
  *)       show_help ;;
esac
