""""""""""""""""""""""""""""""""" ESSENTIALS """"""""""""""""""""""""""""""""""<
filetype plugin indent on                                                      " for plugins to load correctly
syntax enable                                                                  " turn on syntax highlighting
set nocompatible                                                               " don't try to be vi compatible

"""""""""""""""""""""""""""""""""" SETTINGS """""""""""""""""""""""""""""""""""<
" interface
set cmdheight=1                                                                " set command line height
set foldcolumn=1                                                               " always show at least one cahr in fold column
set hlsearch                                                                   " highlight search
set laststatus=2                                                               " always show last status
set noshowmode                                                                 " do not show mode in command line
set showmatch                                                                  " highlight matching brackets
set signcolumn=yes                                                             " always show sign column
set showfulltag                                                                " show info about tag in completemenu
set showcmd                                                                    " always show the command opearator
set ruler                                                                      " show file stats
set number                                                                     " show line numbers
set nospell                                                                    " do not display spellchecking
set list listchars=tab:»\ ,nbsp:␣,trail:·,extends:›,precedes:‹                 " show blank characters
set wrap                                                                       " wrap a text on screen
set shortmess+=a shortmess+=c                                                  " shorter messages

" behaviour
set autowrite                                                                  " autosave buffer when using jumps
set backspace=indent,eol,start                                                 " set the behavious of backspace
set clipboard=unnamedplus                                                      " linux standard clipboard
set encoding=utf-8                                                             " encoding
set termencoding=utf-8                                                         " encoding for terminal
set hidden                                                                     " allow hidden buffers
set incsearch                                                                  " show search results while typing regex
set matchpairs+=<:>                                                            " use % to jump between < and > as well
set mouse=a                                                                    " full mouse intagration
set undofile                                                                   " save history of the file
set nobackup                                                                   " no mess in the project
set noswapfile                                                                 " no problematic swap files
set undodir=/tmp/undodir                                                       " set the directory for undofiles

" completion
set omnifunc=syntaxcomplete#Complete                                           " set onmicomplete function
set completeopt=menuone,noselect                                               " on completion always show menu, but do not select anything

" diff options
set diffopt+=algorithm:minimal                                                 " most minimal diff possible
set diffopt+=indent-heuristic                                                  " indentation
set diffopt-=internal                                                          " don't use internal diff algorithm

" more natural splits
set splitbelow                                                                 " split below to current window
set splitright                                                                 " split right to current window

" indentation
set noshiftround                                                               " do not round indent to multiple of 2
set shiftwidth=2                                                               " indent size

" tabs into space
set expandtab                                                                  " tabs into spaces
set softtabstop=2                                                              " width of the tab in spaces
set tabstop=2                                                                  " tabs at 2 spaces

" text width
set textwidth=80                                                               " 80 columns wide text
set colorcolumn=80,160                                                         " a bar at 80 and 160 column

" gotta go fast!
set updatetime=300                                                             " CursorHold delay
set timeoutlen=1000 ttimeoutlen=0                                              " immediate escape key result
set ttyfast                                                                    " fast rendering

" autocomplete paths in command mode
set path+=**                                                                   " search down files into subdirectories
set wildmenu                                                                   " display all matching files on tab completion
set wildignore+=.git/,**/node_modules/**                                       " ignore files from unwanted directories
set wildmode=longest:full,full                                                 " match longest path fully matching pattern

" ctags
set tags+=.git/tags                                                            " add .git/tags file to scope

" status line
set statusline=%1*\ %{toupper(mode())}\ %2*\ %F:%l:%c%=
set statusline+=\ %Y\ %{LinterStatus()}\ %1*\ %m%r[%n]\ %{strlen(&fenc)?&fenc:'none'}\ 

autocmd InsertEnter,InsertLeave * set cul!

""""""""""""""""""""""""""""""""""" LEADERS """""""""""""""""""""""""""""""""""<
let g:mapleader      = "\<space>"                                              " main leader set to space
let g:maplocalleader = "\<backspace>"                                          " local leader set to comma

"""""""""""""""""""""""""""""""""""" NETRW """"""""""""""""""""""""""""""""""""<
" do not load shitty netrw
let g:loaded_netrwPlugin = 1
let g:loaded_netrw = 1

""""""""""""""""""""""""""""""""""" COPILOT """""""""""""""""""""""""""""""""""<
inoremap <silent><script><expr> <f11> copilot#Accept("\<cr>")
imap <F10> <Plug>(copilot-previous)
imap <F12> <Plug>(copilot-next)
imap <F9> <Plug>(copilot-suggest)
let g:copilot_no_tab_map = v:true

"""""""""""""""""""""""""""""""""""" CTRLP """"""""""""""""""""""""""""""""""""<
nnoremap <leader><leader> :CtrlP<cr>
nnoremap <localleader><localleader> :CtrlPBuffer<cr>
let g:ctrlp_match_window = 'bottom,order:btt,min:1,max:10,results:50'
let g:ctrlp_show_hidden = 1
let g:ctrlp_map = '<leader><leader>'
let g:ctrlp_switch_buffer = 'etvh'
let g:ctrlp_open_multiple_files = '2vjr'
let g:ctrlp_user_command = {
  \ 'types': {
    \ 1: ['.git', 'cd %s && git ls-files'],
    \ },
  \ 'fallback': 'find %s -type f'
  \ }

""""""""""""""""""""""""""""""""""""" TAGS """"""""""""""""""""""""""""""""""""<
command! -nargs=0 MakeTags call job_start('git ctags')

autocmd! BufWritePost * MakeTags

nnoremap <localleader>f g<c-]>
vnoremap <localleader>f g<c-]>

""""""""""""""""""""""""""""""""""""" MAKE """"""""""""""""""""""""""""""""""""<
nnoremap <silent><localleader>b :lmake file=%:.<cr>
nnoremap <silent><localleader>B :lmake file=%:.:<c-r>=line('.')<cr><cr>
nnoremap <silent><localleader>v :!<c-r>=&makeprg<cr> file=%:.<cr>
nnoremap <silent><localleader>V :!<c-r>=&makeprg<cr> file=%:.:<c-r>=line('.')<cr><cr>

augroup MakePrg
  autocmd BufEnter *_spec.rb setlocal makeprg=make\ testrb efm=rspec\ %f:%l\ #\ %m

  autocmd BufEnter *.test.js setlocal makeprg=make\ testjs efm=%.%#\ at\ %f:%l:%c,%.%#\ at\ %.%#(%f:%l:%c)
  autocmd BufEnter *.test.ts setlocal makeprg=make\ testjs efm=%.%#\ at\ %f:%l:%c,%.%#\ at\ %.%#(%f:%l:%c)
  autocmd BufEnter *.test.jsx setlocal makeprg=make\ testjs efm=%.%#\ at\ %f:%l:%c,%.%#\ at\ %.%#(%f:%l:%c)
  autocmd BufEnter *.test.tsx setlocal makeprg=make\ testjs efm=%.%#\ at\ %f:%l:%c,%.%#\ at\ %.%#(%f:%l:%c)
augroup END

""""""""""""""""""""""""""""""""""" ALTFILE """""""""""""""""""""""""""""""""""<
function! s:altFile()
  if exists("b:altfile")
    if bufwinid(b:altfile) > -1
      call win_gotoid(bufwinid(b:altfile))
    else
      silent execute ":vs" b:altfile
    endif
  endif
endfunction

nnoremap <localleader>x :call <sid>altFile()<cr>

augroup AltFile
  autocmd BufReadPost *.rb call setbufvar(expand('%'), 'altfile', expand('%:.:s/^app/spec/:s/\.rb$/_spec.rb/'))
  autocmd BufReadPost *_spec.rb call setbufvar(expand('%'), 'altfile', expand('%:.:s/^spec/app/:s/_spec\.rb$/.rb/'))

  autocmd BufReadPost *.js  call setbufvar(expand('%'), 'altfile', expand('%:.:s/\.js$/.test.js/'))
  autocmd BufReadPost *.ts  call setbufvar(expand('%'), 'altfile', expand('%:.:s/\.ts$/.test.ts/'))
  autocmd BufReadPost *.jsx call setbufvar(expand('%'), 'altfile', expand('%:.:s/\.jsx$/.test.jsx/'))
  autocmd BufReadPost *.tsx call setbufvar(expand('%'), 'altfile', expand('%:.:s/\.tsx$/.test.tsx/'))
  autocmd BufReadPost *.test.js  call setbufvar(expand('%'), 'altfile', expand('%:.:s/\.test\.js$/.js/'))
  autocmd BufReadPost *.test.ts  call setbufvar(expand('%'), 'altfile', expand('%:.:s/\.test\.ts$/.ts/'))
  autocmd BufReadPost *.test.jsx call setbufvar(expand('%'), 'altfile', expand('%:.:s/\.test\.jsx$/.jsx/'))
  autocmd BufReadPost *.test.tsx call setbufvar(expand('%'), 'altfile', expand('%:.:s/\.test\.tsx$/.tsx/'))
augroup END

""""""""""""""""""""""""""""""""""""" ALE """""""""""""""""""""""""""""""""""""<
function! LinterStatus() abort
  let l:counts = ale#statusline#Count(bufnr(''))
  let l:all_errors = l:counts.error + l:counts.style_error
  let l:all_non_errors = l:counts.total - l:all_errors
  return l:counts.total == 0 ? 'OK' : printf('%dW %dE', all_non_errors, all_errors)
endfunction

let g:ale_close_preview_on_insert = 1
let g:ale_completion_enabled = 1
let g:ale_floating_preview = 0
let g:ale_set_loclist = 1
let g:ale_loclist_msg_format = '%severity%: %s'

let g:ale_echo_cursor = 0

let g:ale_sign_column_always = 1
let g:ale_sign_error = 'E'
let g:ale_sign_info = 'I'
let g:ale_sign_style_error = 'ES'
let g:ale_sign_style_warning = 'WS'
let g:ale_sign_warning = 'W'

let g:ale_virtualtext_cursor = 'all'
let g:ale_virtualtext_prefix = '%comment% '

set omnifunc=ale#completion#OmniFunc
inoremap <tab> <c-n>
inoremap <s-tab> <c-x><c-o>

nnoremap <silent> [e    <Plug>(ale_previous_wrap)
nnoremap <silent> ]e    <Plug>(ale_next_wrap)

nnoremap <localleader>a <Plug>(ale_code_action)
nnoremap <localleader>A <Plug>(ale_fix)
nnoremap <localleader>d <Plug>(ale_go_to_definition_in_vsplit)
nnoremap <localleader>D <Plug>(ale_go_to_type_definition_in_vsplit)
nnoremap <localleader>s <Plug>(ale_info)
nnoremap <localleader>S <Plug>(ale_toggle)
nnoremap <localleader>F :ALEFindReferences -quickfix \| copen<cr>
nnoremap <localleader>g <Plug>(ale_detail)
nnoremap <localleader>G <Plug>(ale_hover)

""""""""""""""""""""""""""""""""""" COMMENT """""""""""""""""""""""""""""""""""<
function! s:commentToggle()
  let line = getline('.')
  if match(l:line, '^\s*'.substitute(&commentstring, '%s', '.*', '')) >= 0
    let l:target = substitute(l:line, '^\s*\zs'.substitute(&commentstring, '%s', '', ''), '', '')
  else
    let l:target = printf(&commentstring, l:line)
  endif
  keeppatterns s/^.*$/\=l:target/
endfunction

nnoremap <silent><localleader>e :call <sid>commentToggle()<cr>
vnoremap <silent><localleader>e :call <sid>commentToggle()<cr>

""""""""""""""""""""""""""""""""""" QUICKFIX """"""""""""""""""""""""""""""""""<
function! s:openQuickfix(new_split_cmd)
  let l:qf_idx = line('.')
  wincmd p
  execute a:new_split_cmd
  execute l:qf_idx . 'cc'
endfunction

autocmd FileType qf nnoremap <buffer> <c-v> :call <sid>openQuickfix("vnew")<cr>
autocmd FileType qf nnoremap <buffer> <c-x> :call <sid>openQuickfix("split")<cr>
autocmd Filetype qf setlocal statusline=%1*%f%2*

" toggle loclist list
function! s:toggleLocList()
  if empty(filter(getwininfo(), 'v:val.loclist'))
    lopen
  else
    lclose
  endif
endfunction

nnoremap <silent><leader>w :call <sid>toggleLocList()<cr>

" toggle quickfix list
function! s:toggleQuickFix()
  if empty(filter(getwininfo(), 'v:val.quickfix'))
    copen
  else
    cclose
  endif
endfunction

nnoremap <silent><leader>q :call <sid>toggleQuickFix()<cr>

""""""""""""""""""""""""""""""""""""" TODO """"""""""""""""""""""""""""""""""""<
function! s:putCurrentGitHubIssue()
  let l:issue = substitute(system("tertius story get"), '\r', '', 'g')
  execute "0put =l:issue"
endfunction

function! s:toggleTodoFile()
  silent call system('git notes --ref=todo copy HEAD~ HEAD')
  if buflisted(bufname('.git/NOTES_EDITMSG'))
    if !win_gotoid(bufwinid('.git/NOTES_EDITMSG'))
      execute ":split .git/NOTES_EDITMSG"
    endif
  else
    execute ":G notes --ref=todo edit"
  endif
  execute ":set syntax=xit"
  if <sid>isBufferEmptyButComments()
    execute "normal! ggVGd"
    call <sid>putCurrentGitHubIssue()
  endif
  syntax match Comment /^#.*/ containedin=ALL
endfunction

nnoremap <leader>x :call <sid>toggleTodoFile()<cr>

""""""""""""""""""""""""""""""""""" FUGITIVE """"""""""""""""""""""""""""""""""<
function! s:openFugitive()
  Git
  resize 10
  setlocal winfixheight
  setlocal nonumber
  setlocal norelativenumber
endfunction

function! s:pickaxe(query)
  if !empty(a:query)
    execute ":G log -p -G \"" a:query "\""
    call setreg("/", "\\V" . a:query)
  endif
endfunction

function! s:defaultBranch()
  return trim(system("git config --get core.default"))
endfunction

function! s:branchoffCommit(...)
  if a:0 > 0
    let l:head = a:1
  else
    let l:head = "HEAD"
  end
  return trim(system("git merge-base " . <sid>defaultBranch() . " " . l:head))
endfunction

function! s:whatthecommit()
  return trim(system("curl -Ls whatthecommit.com/index.txt"))
endfunction

function! s:gitPruneFile(...)
  if a:0 > 0
    let l:head = a:1
  else
    let l:head = "HEAD"
  end
  let file = expand("%")
  execute "!git filter-branch --prune-empty --force --tree-filter 'rm -f " . l:file . "' " . s:branchoffCommit(l:head) . ".." . l:head
endfunction

function! s:gitWIP()
  execute ":G commit --no-verify --message 'WIP " . <sid>whatthecommit() . "'"
endfunction

function! s:gitRebaseBranch(...)
  if a:0 > 0
    let l:head = a:1
  else
    let l:head = "HEAD"
  end
  execute ":G rebase --interactive " . <sid>branchoffCommit(l:head)
endfunction

function! s:gitChanges(...)
  if a:0 > 0
    let l:head = a:1
  else
    let l:head = "HEAD"
  end
  execute ":Gclog --pretty=oneline " . <sid>branchoffCommit(l:head) . ".." . l:head
endfunction

function! s:gitUpdate()
  G fetch
  execute ":G pull --rebase " . substitute(<sid>defaultBranch(), "/", " ", "")
  echom "Branch rebased to its default branch"
endfunction

function! s:gitAbsorb()
  execute ":G absorb --base " . <sid>branchoffCommit()
endfunction

function! s:gitAbsorbAndRebase()
  execute ":G absorb --and-rebase --base " . <sid>branchoffCommit()
endfunction

function! s:gitPush()
  execute ":G push --force-with-lease --follow-tags"
  let l:branch = trim(system("git rev-parse --abbrev-ref HEAD"))
  let l:base = substitute(<sid>defaultBranch(), ".*/", "", "")
  echom "Branch pushed"

  if l:branch != l:base
    if confirm("Do you want to open a pull request?", "&yes\n&No", 2) == 1
      call <sid>oyVeyPullRequestDescription()
    endif
  endif
endfunction

function! s:gitCheckout(branch)
  let l:branch = substitute(substitute(a:branch, '^.*\s\+', '', ''), 'remotes/origin/', '', '')
  execute ":G switch " . l:branch
  echom "Switched to " . l:branch
endfunction

autocmd FileType git nnoremap <buffer> w :<c-u>call <sid>gitCheckout(trim(getline(".")))<cr>
nnoremap <leader>n :<c-u>call <sid>gitCheckout(trim(input("branch /")))<cr>

function! s:branchFromCommit()
  let l:commit = trim(system("git log -1 --pretty=%s"))
  let l:branch_name = trim(substitute(substitute(tolower(l:commit), '[^a-z0-9-]', ' ', 'g'), '\s\+', '-', 'g'))
  let l:branch_name = input("branch /", l:branch_name)
  execute ":G checkout -B " . l:branch_name
endfunction

nnoremap <leader><C-n> :<c-u>call <sid>branchFromCommit()<cr>

function! s:cherryPickToBranch(branch)
  let l:commit = trim(system("git log -1 --pretty=%H"))
  execute ":G switch " . a:branch
  execute ":G pull --rebase"
  execute ":G cherry-pick " . l:commit
endfunction

autocmd FileType git nnoremap <buffer> W :<c-u>call <sid>cherryPickToBranch(trim(getline(".")))<cr>

command! -nargs=0 W Gwrite
command! -nargs=0 E Gedit
command! -nargs=0 D GDelete
command! -nargs=0 Gprune call <sid>gitPruneFile()
command! -nargs=0 Gwip call <sid>gitWIP()
command! -nargs=0 Grebase call <sid>gitRebaseBranch()
command! -nargs=0 Gchanges call <sid>gitChanges()
command! -nargs=0 Gupdate call <sid>gitUpdate()
command! -nargs=0 Gabsorb call <sid>gitAbsorb()
command! -nargs=0 GabsorbAndRebase call <sid>gitAbsorbAndRebase()
command! -nargs=0 Gpushf call <sid>gitPush()
command! -nargs=1 -complete=buffer GPickaxe call <sid>pickaxe(<q-args>)

autocmd! FileType fugitive nnoremap <buffer> rI :<c-u>call <sid>gitRebaseBranch()<cr>
autocmd! FileType gitcommit setlocal spell spelllang=en_us

nnoremap <leader>a :Gabsorb<cr>
nnoremap <leader>A :GabsorbAndRebase<cr>
nnoremap <leader>b :G blame<cr>
nnoremap <leader>B :G branch --all<cr>
nnoremap <leader>i :echo "Branch-off commit: " . <sid>branchoffCommit("HEAD")<cr>
nnoremap <leader>I :edit .<cr>
nnoremap <leader>e :Gedit<cr>
nnoremap <leader>o :G fetch<cr>
nnoremap <leader>O :Gupdate<cr>
nnoremap <leader>g :call <sid>openFugitive()<cr>
nnoremap <leader>d :Gchanges<cr>
nnoremap <leader>C :0GlLog --pretty=oneline<cr>
nnoremap <leader>c :GcLog --pretty=oneline<cr>
nnoremap <leader>p :G pull --rebase<cr>
nnoremap <leader>P :G push<cr>
nnoremap <leader><c-p> :Gpushf<cr>
nnoremap <leader>s :call <sid>pickaxe(input("pickaxe /", "", "tag"))<cr>
vnoremap <leader>s :<c-u>call <sid>pickaxe(<sid>selectedText())<cr>
""""""""""""""""""""""""""""""""""" FUGITIVE """""""""""""""""""""""""""""""""">

"""""""""""""""""""""""""""""""""" GITGUTTER """"""""""""""""""""""""""""""""""<
nnoremap ]h :GitGutterNextHunk<cr>
nnoremap [h :GitGutterPrevHunk<cr>

"""""""""""""""""""""""""""""""" EXPAND REGION """"""""""""""""""""""""""""""""<
vmap v     <Plug>(expand_region_expand)
vmap <C-v> <Plug>(expand_region_shrink)

"""""""""""""""""""""""""""""""""" BLAMELINE """"""""""""""""""""""""""""""""""<
function! BlameLineHandler(channel, msg)
  let text = substitute(trim(a:msg), '^\(\w\+\)\s\+(\(.\{-}\)\s\+\d\+).*', ' \1 \2', 'g')
  call prop_remove({ "type": "blame_line" }, 1, line("$"))
  call prop_add(line("."), 0, { "text": l:text, "type": "blame_line", "text_align": "right" })
endfunc

function! s:blameLine()
  let line = line('.')
  let file = expand('%')
  let cmd = "git blame --date=relative -L" . l:line . "," . l:line . " " . l:file
  call job_start(l:cmd, { "out_cb": "BlameLineHandler" })
endfunction

function s:setBlameLine()
  if prop_type_get("blame_line") == {} && trim(system("git rev-parse --is-inside-work-tree")) == "true"
    hi BlameLine ctermfg=8
    call prop_type_add("blame_line", { "highlight": "BlameLine" })
    autocmd CursorHold * call <sid>blameLine()
  endif
endfunction

autocmd BufReadPost * call <sid>setBlameLine()

""""""""""""""""""""""""""""""""""" WORKFLOW """""""""""""""""""""""""""""""""""
function! s:askOyVeySelected()
  let l:text = <sid>selectedText()
  if empty(l:text)
    return
  endif
  let l:solution = system('tertius ask', l:text)
  let lines = split(l:solution, "\n")
  for i in range(len(lines))
    let lines[i] = printf(&commentstring, lines[i])
  endfor
  call append(line('.'), lines)
endfunction

vnoremap <leader>y :call <sid>askOyVeySelected()<cr>

function! s:openIntermediateBuffer()
  wincmd n
  setlocal buftype=nofile
  setlocal bufhidden=delete
  setlocal noswapfile
  setlocal syntax=markdown
endfunction

function! s:oyVeyPullRequestDescription()
  call <sid>openIntermediateBuffer()
  file /tmp/pull-request-description
  let l:summary = substitute(system("tertius pull-request write"), '\r', '', 'g')
  execute "0put =l:summary"
  redraw!
  autocmd! BufWinLeave <buffer> call s:updatePullRequestDescription()
endfunction

function! s:updatePullRequestDescription()
  if !<sid>isBufferEmpty()
    execute ":%!tertius pull-request publish"
  endif
endfunction

function! s:prepareIssue()
  call <sid>openIntermediateBuffer()
  file /tmp/issue-description
  nnoremap <buffer> <cr> :<c-u>call <sid>oyVeyIssue()<cr>
  autocmd! BufWinLeave <buffer> call s:reportIssue()
endfunction

function! s:oyVeyIssue()
  execute ":%!tertius story write"
  redraw!
endfunction

function! s:reportIssue()
  if !<sid>isBufferEmpty()
    let l:type = input("branch type /", "")
    execute ":%!tertius story publish " . l:type
  endif
endfunction

nnoremap <leader>N :call <sid>prepareIssue()<cr>

function! s:oyVeyCommitMessage()
  execute ":%!tertius commit write-message"
  normal! ggVGgq
  redraw!
endfunction

autocmd! FileType gitcommit nnoremap <buffer> <cr> :<c-u>call <sid>oyVeyCommitMessage()<cr>

function! s:oyVeyFixError()
  let l:loclist = ale#engine#GetLoclist(bufnr('%'))
  if empty(l:loclist)
    return
  endif
  let [l:lnum, l:col] = getpos('.')[1:2]
  let l:item_under_cursor = filter(l:loclist, {_, v -> v.lnum == l:lnum && v.col <= l:col && (has_key(v, 'end_col') ? v.end_col : v.col) >= l:col})
  if empty(l:item_under_cursor)
    return
  endif
  let l:item = l:item_under_cursor[0]
  let l:detail = printf("in file %s at line %d and column %s. This are the details of the problem:\n%s", expand('%:.'), l:item.lnum, l:item.col, l:item.text)
  let l:solution = system('tertius code fix ' . expand('%:p'), l:detail)
  let lines = split(l:solution, "\n")
  for i in range(len(lines))
    let lines[i] = printf(&commentstring, lines[i])
  endfor
  call append(line('.'), lines)
endfunction

nnoremap <localleader>Y :call <sid>oyVeyFixError()<cr>

function! s:oyVeyExplain()
  let l:text = <sid>selectedText()
  if empty(l:text)
    return
  endif
  let l:solution = system('tertius code explain', l:text)
  let lines = split(l:solution, "\n")
  for i in range(len(lines))
    let lines[i] = printf(&commentstring, lines[i])
  endfor
  call append(line('.'), lines)
endfunction

vnoremap <localleader>y :call <sid>oyVeyExplain()<cr>

"""""""""""""""""""""""""""""""""""" UTILS """"""""""""""""""""""""""""""""""""<
" checks if a buffer is empty
function! s:isBufferEmpty()
  if line('$') == 1 && getline(1) == ''
    return 1
  else
    return 0
  endif
endfunction

" checks if a buffer is empty, but contains comments
function! s:isBufferEmptyButComments()
  for i in range(1, line('$'))
    let line = substitute(getline(i), '^\s*', '', '')
    if line != '' && line[0] != '#'
      return 0
    endif
  endfor
  return 1
endfunction

" returns a text under visual selection
function! s:selectedText()
  silent normal gv"vy
  let l:selection = getreg('v')
  let l:escaped   = escape(l:selection, '\/')
  let l:regexp    = substitute(l:escaped, "\n", "\\\\n", "g")
  normal \<Esc>
  return l:regexp
endfunction

" triggers a buffer search using a given query
function! s:findTextInBuffer(register, query)
  call setreg(a:register, "\\V" . a:query)
  normal n
endfunction

" some appearance togglable settings
nnoremap <leader>1 :set relativenumber!<cr>
nnoremap <leader>2 :set hlsearch!<cr>
nnoremap <leader>3 :set spell!<cr>

" make folds and return to manual foldmethod
function! s:makeFolds()
  setlocal foldmethod=indent
  norm zR
  setlocal foldmethod=manual
endfunction

set foldmethod=manual
nnoremap <leader>4 :call <sid>makeFolds()<cr>

" terminal-mode
nnoremap <leader>v :vertical terminal<cr>
autocmd TerminalWinOpen * tmap <esc> <c-\><c-n>

" cnake case to camel case and back
nnoremap <silent><localleader>c :keeppatterns s:<c-r><c-w>:\=substitute(submatch(0), '\(\u\?\l\+\)\(\u\)', '\l\1_\l\2', 'g'):<cr><c-o>
nnoremap <silent><localleader>C :keeppatterns s:<c-r><c-w>:\=substitute(submatch(0),'\(\l\+\)_\?', '\u\1', 'g'):<cr><c-o>

" use `open` command to open a current buffer
command! -nargs=0 Open !open %

" leave only the current buffer - delete others
command! -nargs=0 BufOnly execute '%bdelete|edit #|normal `"'

" undo sequence for space, dot and newline
inoremap <space> <C-G>u<space>
inoremap . <C-G>u.
inoremap <cr> <C-G>u<cr>

" `<C-p>` that acts like `p`, but not change the `+` register
vnoremap <C-p> "pdp
vnoremap <C-P> "pdP

" right click is an escape
nnoremap <RightMouse> <esc>
inoremap <RightMouse> <esc>
vnoremap <RightMouse> <esc>
cnoremap <RightMouse> <esc>

" source a file under DIRENV_EXTRA_VIMRC environment variable if exists
if !empty($DIRENV_EXTRA_VIMRC) && filereadable($DIRENV_EXTRA_VIMRC)
  source $DIRENV_EXTRA_VIMRC
endif

"""""""""""""""""""""""""""""""""" NAVIGATION """""""""""""""""""""""""""""""""<
" triggers a grep on query and opens quickfix list
function! s:grep(query)
  if !empty(a:query)
    execute "silent Ggrep \"" . a:query . "\" | copen"
  endif
endfunction

" finds a file using git ls-files or find command
function! s:find(query)
  if !empty(a:query)
    execute "silent cexpr system('git ls-files \"**" . a:query . "*\" | sed \"s/.*/&:1:1/\"') | copen"
  endif
endfunction

" move around buffers with leader key
nnoremap <localleader><cr>  :argadd<cr>
nnoremap <localleader><esc> :argdelete<cr>
nnoremap <localleader>h :previous<cr>
nnoremap <localleader>l :next<cr>
nnoremap <localleader>k :bprevious<cr>
nnoremap <localleader>j :bnext<cr>

" move around windows with leader key
nnoremap <silent><leader>k :wincmd k<cr>
nnoremap <silent><leader>j :wincmd j<cr>
nnoremap <silent><leader>h :wincmd h<cr>
nnoremap <silent><leader>l :wincmd l<cr>

" lookup
nnoremap <leader>F :call <sid>find(input("find /", "", "file_in_path"))<cr>
nnoremap <leader>f :call <sid>grep(input("grep /", "", "tag"))<cr>

vnoremap <leader>F :<c-u>call <sid>find(<sid>selectedText())<cr>
vnoremap <leader>f :<c-u>call <sid>grep(<sid>selectedText())<cr>

vnoremap <silent>* :<c-u>call <sid>findTextInBuffer("/", <sid>selectedText())<cr>n
vnoremap <silent># :<c-u>call <sid>findTextInBuffer("#", <sid>selectedText())<cr>n

command! -nargs=1 -complete=buffer Grep call <sid>grep(<q-args>)
command! -nargs=1 -complete=buffer Find call <sid>find(<q-args>)

" remap addition and substraction
nnoremap <A-a> <C-a>
nnoremap <A-x> <C-x>
vnoremap <A-a> <C-a>
vnoremap <A-x> <C-x>
vnoremap g<A-a> g<C-a>
vnoremap g<A-x> g<C-x>

"""""""""""""""""""""""""""""""""""" COLORS """""""""""""""""""""""""""""""""""<
hi ColorColumn                          ctermbg=8
hi CtrlPMode1                           ctermbg=0  ctermfg=3
hi DiffAdd                              ctermbg=8  ctermfg=10 cterm=none
hi DiffChange                           ctermbg=8  ctermfg=3  cterm=none
hi DiffDelete                           ctermbg=8  ctermfg=9  cterm=none
hi DiffText                             ctermbg=8  ctermfg=11 cterm=underline
hi Directory                                       ctermfg=4
hi FoldColumn                           ctermbg=0  ctermfg=7
hi Folded                               ctermbg=0  ctermfg=7  cterm=bold
hi NormalFloat                          ctermbg=0
hi Pmenu                                ctermbg=0  ctermfg=7
hi PmenuSbar                            ctermbg=0  ctermfg=7
hi PmenuSel                             ctermbg=8  ctermfg=15
hi QuickFixLine                         ctermbg=8
hi Search                               ctermbg=8  ctermfg=11 cterm=bold
hi SignColumn                           ctermbg=0
hi SpellBad                             ctermbg=8
hi StatusLine                                                 cterm=bold
hi StatusLineNC                         ctermbg=0  ctermfg=0  cterm=none
hi TabLine                              ctermbg=8  ctermfg=7  cterm=none
hi User1                                ctermbg=3  ctermfg=0  cterm=bold
hi User2                                ctermbg=0  ctermfg=15 cterm=bold
hi VertSplit                            ctermbg=8  ctermfg=8
hi Visual                               ctermbg=7  ctermfg=0

hi ALEVirtualTextError                             ctermfg=1
hi ALEVirtualTextWarning                           ctermfg=4
hi ALEVirtualTextInfo                              ctermfg=5
hi ALEError                             ctermbg=0  ctermfg=1  cterm=underline
hi ALEErrorSign                         ctermbg=0  ctermfg=1
hi ALEWarning                           ctermbg=0  ctermfg=4  cterm=underline
hi ALEWarningSign                       ctermbg=0  ctermfg=4
hi ALEInfo                              ctermbg=0  ctermfg=5  cterm=underline
hi ALEInfoSign                          ctermbg=0  ctermfg=5

hi link DirvishGitModified DiffChange
hi link DirvishGitStaged DiffAdd
hi link DirvishGitRenamed DiffChange
hi link DirvishGitUnmerged DiffChange
hi link DirvishGitIgnored DiffDelete
hi link DirvishGitUntracked DiffChange
hi default link DirvishGitUntrackedDir DirvishPathTail

hi link CtrlPMode2 User1
hi link TabLineFill StatusLineNC
hi link TabLineSel User1

" variable name
hi! Identifier   ctermfg=12 cterm=none
" function name
hi! Function     ctermfg=2  cterm=none
" generic preprocessor
hi! PreProc      ctermfg=5  cterm=none
" preprocessor #include
hi! Include      ctermfg=5  cterm=none
" preprocessor #define
hi! Define       ctermfg=5  cterm=bold
" same as define
hi! Macro        ctermfg=5  cterm=none
" preprocessor #if, #else, #endif, etc.
hi! PreCondit    ctermfg=5  cterm=none
" generic statement
hi! Statement    ctermfg=4  cterm=bold
" if, then, else, endif, swicth, etc.
hi! Conditional  ctermfg=4  cterm=bold
" for, do, while, etc.
hi! Repeat       ctermfg=4  cterm=bold
" case, default, etc.
hi! Label        ctermfg=4  cterm=bold
" try, catch, throw
hi! Exception    ctermfg=4  cterm=bold
" sizeof, "+", "*", etc.
hi! Operator     ctermfg=14 cterm=bold
" any other keyword
hi! Keyword      ctermfg=4  cterm=bold
" generic type
hi! Type         ctermfg=2  cterm=bold
" static, register, volatile, etc
hi! StorageClass ctermfg=2  cterm=none
" struct, union, enum, etc.
hi! Structure    ctermfg=2  cterm=none
" typedef
hi! Typedef      ctermfg=2  cterm=none
" character constant: 'c', '/n'
hi! Character    ctermfg=3  cterm=none
" string constant: "this is a string"
hi! String       ctermfg=3  cterm=none
" generic comment
hi! Comment      ctermfg=8  cterm=none
" generic constant
hi! Constant     ctermfg=7  cterm=none
" boolean constant: TRUE, false
hi! Boolean      ctermfg=7  cterm=bold
" number constant: 234, 0xff
hi! Number       ctermfg=7  cterm=bold
" floating point constant: 2.3e10
hi! Float        ctermfg=7  cterm=bold
