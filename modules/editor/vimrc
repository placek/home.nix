""""""""""""""""""""""""""""""""" ESSENTIALS """"""""""""""""""""""""""""""""""<
filetype plugin indent on                                                      " for plugins to load correctly
syntax enable                                                                  " turn on syntax highlighting
set nocompatible                                                               " don't try to be vi compatible

"""""""""""""""""""""""""""""""""" SETTINGS """""""""""""""""""""""""""""""""""<
" interface
set cmdheight=1                                                                " set command line height
set foldcolumn=1                                                               " always show at least one cahr in fold column
set hlsearch                                                                   " highlight search
set laststatus=2                                                               " always show last status
set noshowmode                                                                 " do not show mode in command line
set showmatch                                                                  " highlight matching brackets
set signcolumn=yes                                                             " always show sign column
set showcmd                                                                    " always show the command opearator
set ruler                                                                      " show file stats
set number                                                                     " show line numbers
set nospell                                                                    " do not display spellchecking
set list listchars=tab:»\ ,nbsp:␣,trail:·,extends:›,precedes:‹                 " show blank characters
set wrap                                                                       " wrap a text on screen
set shortmess+=a shortmess+=c                                                  " shorter messages

" behaviour
set autowrite                                                                  " autosave buffer when using jumps
set backspace=indent,eol,start                                                 " set the behavious of backspace
set clipboard=unnamedplus                                                      " linux standard clipboard
set encoding=utf-8                                                             " encoding
set termencoding=utf-8                                                         " encoding for terminal
set hidden                                                                     " allow hidden buffers
set incsearch                                                                  " show search results while typing regex
set matchpairs+=<:>                                                            " use % to jump between < and > as well
set mouse=a                                                                    " full mouse intagration
set undofile                                                                   " save history of the file
set nobackup                                                                   " no mess in the project
set noswapfile                                                                 " no problematic swap files
set undodir=/tmp/undodir                                                       " set the directory for undofiles

" completion
set omnifunc=syntaxcomplete#Complete                                           " set onmicomplete function
set completeopt=menuone,noselect                                               " on completion always show menu, but do not select anything

" diff options
set diffopt+=algorithm:minimal                                                 " most minimal diff possible
set diffopt+=indent-heuristic                                                  " indentation
set diffopt-=internal                                                          " don't use internal diff algorithm

" more natural splits
set splitbelow                                                                 " split below to current window
set splitright                                                                 " split right to current window

" indentation
set noshiftround                                                               " do not round indent to multiple of 2
set shiftwidth=2                                                               " indent size

" tabs into space
set expandtab                                                                  " tabs into spaces
set softtabstop=2                                                              " width of the tab in spaces
set tabstop=2                                                                  " tabs at 2 spaces

" text width
set textwidth=80                                                               " 80 columns wide text
set colorcolumn=80,160                                                         " a bar at 80 and 160 column

" gotta go fast!
set updatetime=300                                                             " CursorHold delay
set timeoutlen=1000 ttimeoutlen=0                                              " immediate escape key result
set ttyfast                                                                    " fast rendering

" autocomplete paths in command mode
set path+=**                                                                   " search down files into subdirectories
set wildmenu                                                                   " display all matching files on tab completion
set wildignore+=.git/,**/node_modules/**                                       " ignore files from unwanted directories
set wildmode=longest:full,full                                                 " match longest path fully matching pattern

" status line
set statusline=%1*\ %{toupper(mode())}\ %2*\ %F:%l:%c%=
set statusline+=\ %Y\ %{LinterStatus()}\ %1*\ %m%r[%n]\ %{strlen(&fenc)?&fenc:'none'}\ 

autocmd InsertEnter,InsertLeave * set cul!

""""""""""""""""""""""""""""""""""" LEADERS """""""""""""""""""""""""""""""""""<
let g:mapleader      = "\<space>"                                              " main leader set to space
let g:maplocalleader = "\<backspace>"                                          " local leader set to comma

""""""""""""""""""""""""""""""""""""" MAKE """"""""""""""""""""""""""""""""""""<
nnoremap <silent><localleader>b :lmake file=%:.<cr>
nnoremap <silent><localleader>B :lmake file=%:.:<c-r>=line('.')<cr><cr>
nnoremap <silent><localleader>v :!<c-r>=&makeprg<cr> file=%:.<cr>
nnoremap <silent><localleader>V :!<c-r>=&makeprg<cr> file=%:.:<c-r>=line('.')<cr><cr>

augroup MakePrg
  autocmd BufEnter *_spec.rb setlocal makeprg=make\ testrb efm=rspec\ %f:%l\ #\ %m

  autocmd BufEnter *.test.js setlocal makeprg=make\ testjs efm=%.%#\ at\ %f:%l:%c,%.%#\ at\ %.%#(%f:%l:%c)
  autocmd BufEnter *.test.ts setlocal makeprg=make\ testjs efm=%.%#\ at\ %f:%l:%c,%.%#\ at\ %.%#(%f:%l:%c)
  autocmd BufEnter *.test.jsx setlocal makeprg=make\ testjs efm=%.%#\ at\ %f:%l:%c,%.%#\ at\ %.%#(%f:%l:%c)
  autocmd BufEnter *.test.tsx setlocal makeprg=make\ testjs efm=%.%#\ at\ %f:%l:%c,%.%#\ at\ %.%#(%f:%l:%c)
augroup END

""""""""""""""""""""""""""""""""""" ALTFILE """""""""""""""""""""""""""""""""""<
function! s:altFile()
  if exists("b:altfile")
    if bufwinid(b:altfile) > -1
      call win_gotoid(bufwinid(b:altfile))
    else
      silent execute ":vs" b:altfile
    endif
  endif
endfunction

nnoremap <localleader>x :call <sid>altFile()<cr>

augroup AltFile
  autocmd BufReadPost *.rb call setbufvar(expand('%'), 'altfile', expand('%:.:s/^app/spec/:s/\.rb$/_spec.rb/'))
  autocmd BufReadPost *_spec.rb call setbufvar(expand('%'), 'altfile', expand('%:.:s/^spec/app/:s/_spec\.rb$/.rb/'))

  autocmd BufReadPost *.js  call setbufvar(expand('%'), 'altfile', expand('%:.:s/\.js$/.test.js/'))
  autocmd BufReadPost *.ts  call setbufvar(expand('%'), 'altfile', expand('%:.:s/\.ts$/.test.ts/'))
  autocmd BufReadPost *.jsx call setbufvar(expand('%'), 'altfile', expand('%:.:s/\.jsx$/.test.jsx/'))
  autocmd BufReadPost *.tsx call setbufvar(expand('%'), 'altfile', expand('%:.:s/\.tsx$/.test.tsx/'))
  autocmd BufReadPost *.test.js  call setbufvar(expand('%'), 'altfile', expand('%:.:s/\.test\.js$/.js/'))
  autocmd BufReadPost *.test.ts  call setbufvar(expand('%'), 'altfile', expand('%:.:s/\.test\.ts$/.ts/'))
  autocmd BufReadPost *.test.jsx call setbufvar(expand('%'), 'altfile', expand('%:.:s/\.test\.jsx$/.jsx/'))
  autocmd BufReadPost *.test.tsx call setbufvar(expand('%'), 'altfile', expand('%:.:s/\.test\.tsx$/.tsx/'))
augroup END

""""""""""""""""""""""""""""""""""" COMMENT """""""""""""""""""""""""""""""""""<
function! s:commentToggle()
  let line = getline('.')
  if match(l:line, '^\s*'.substitute(&commentstring, '%s', '.*', '')) >= 0
    let l:target = substitute(l:line, '^\s*\zs'.substitute(&commentstring, '%s', '', ''), '', '')
  else
    let l:target = printf(&commentstring, l:line)
  endif
  keeppatterns s/^.*$/\=l:target/
endfunction

nnoremap <silent><localleader>e :call <sid>commentToggle()<cr>
vnoremap <silent><localleader>e :call <sid>commentToggle()<cr>

""""""""""""""""""""""""""""""""""" QUICKFIX """"""""""""""""""""""""""""""""""<
function! s:openQuickfix(new_split_cmd)
  let l:qf_idx = line('.')
  wincmd p
  execute a:new_split_cmd
  execute l:qf_idx . 'cc'
endfunction

autocmd FileType qf nnoremap <buffer> <c-v> :call <sid>openQuickfix("vnew")<cr>
autocmd FileType qf nnoremap <buffer> <c-x> :call <sid>openQuickfix("split")<cr>
autocmd Filetype qf setlocal statusline=%1*%f%2*

" toggle loclist list
function! s:toggleLocList()
  if empty(filter(getwininfo(), 'v:val.loclist'))
    lopen
  else
    lclose
  endif
endfunction

nnoremap <silent><leader>w :call <sid>toggleLocList()<cr>

" toggle quickfix list
function! s:toggleQuickFix()
  if empty(filter(getwininfo(), 'v:val.quickfix'))
    copen
  else
    cclose
  endif
endfunction

nnoremap <silent><leader>q :call <sid>toggleQuickFix()<cr>

"""""""""""""""""""""""""""""""""""" UTILS """"""""""""""""""""""""""""""""""""<
" open a new buffer for intermediate operations
function! s:openIntermediateBuffer()
  wincmd n
  setlocal buftype=nofile
  setlocal bufhidden=delete
  setlocal noswapfile
  setlocal syntax=markdown
endfunction

" checks if a buffer is empty
function! s:isBufferEmpty()
  if line('$') == 1 && getline(1) == ''
    return 1
  else
    return 0
  endif
endfunction

" checks if a buffer is empty, but contains comments
function! s:isBufferEmptyButComments()
  for i in range(1, line('$'))
    let line = substitute(getline(i), '^\s*', '', '')
    if line != '' && line[0] != '#'
      return 0
    endif
  endfor
  return 1
endfunction

" returns a text under visual selection
function! s:selectedText()
  silent normal gv"vy
  let l:selection = getreg('v')
  let l:escaped   = escape(l:selection, '\/')
  let l:regexp    = substitute(l:escaped, "\n", "\\\\n", "g")
  normal \<Esc>
  return l:regexp
endfunction

" triggers a buffer search using a given query
function! s:findTextInBuffer(register, query)
  call setreg(a:register, "\\V" . a:query)
  normal n
endfunction

" append the text to the current buffer as a comment
function! s:appendComment(text) abort
  let lines = split(a:text, "\n")
  for i in range(len(lines))
    let lines[i] = printf(&commentstring, lines[i])
  endfor
  call append(line('.'), lines)
endfunction

" some appearance togglable settings
nnoremap <leader>1 :set relativenumber!<cr>
nnoremap <leader>2 :set hlsearch!<cr>
nnoremap <leader>3 :set spell!<cr>

" make folds and return to manual foldmethod
function! s:makeFolds()
  setlocal foldmethod=indent
  norm zR
  setlocal foldmethod=manual
endfunction

set foldmethod=manual
nnoremap <leader>4 :call <sid>makeFolds()<cr>

" terminal-mode
nnoremap <leader>v :vertical terminal<cr>
autocmd TerminalWinOpen * tmap <esc> <c-\><c-n>

" snake case to camel case and back
nnoremap <silent><localleader>c :keeppatterns s:<c-r><c-w>:\=substitute(submatch(0), '\(\u\?\l\+\)\(\u\)', '\l\1_\l\2', 'g'):<cr><c-o>
nnoremap <silent><localleader>C :keeppatterns s:<c-r><c-w>:\=substitute(submatch(0),'\(\l\+\)_\?', '\u\1', 'g'):<cr><c-o>

" use `open` command to open a current buffer
command! -nargs=0 Open !open %

" leave only the current buffer - delete others
command! -nargs=0 BufOnly execute '%bdelete|edit #|normal `"'

" undo sequence for space, dot and newline
inoremap <space> <C-G>u<space>
inoremap . <C-G>u.
inoremap <cr> <C-G>u<cr>

" `<C-p>` that acts like `p`, but not change the `+` register
vnoremap <C-p> "pdp
vnoremap <C-P> "pdP

" right click is an escape
nnoremap <RightMouse> <esc>
inoremap <RightMouse> <esc>
vnoremap <RightMouse> <esc>
cnoremap <RightMouse> <esc>

" source a file under DIRENV_EXTRA_VIMRC environment variable if exists
if !empty($DIRENV_EXTRA_VIMRC) && filereadable($DIRENV_EXTRA_VIMRC)
  source $DIRENV_EXTRA_VIMRC
endif

"""""""""""""""""""""""""""""""""" NAVIGATION """""""""""""""""""""""""""""""""<
" triggers a grep on query and opens quickfix list
function! s:grep(query)
  if !empty(a:query)
    execute "silent Ggrep \"" . a:query . "\" | copen"
  endif
endfunction

" finds a file using git ls-files or find command
function! s:find(query)
  if !empty(a:query)
    execute "silent cexpr system('git ls-files \"**" . a:query . "*\" | sed \"s/.*/&:1:1/\"') | copen"
  endif
endfunction

" move around buffers with leader key
nnoremap <localleader><cr>  :argadd<cr>
nnoremap <localleader><esc> :argdelete<cr>
nnoremap <localleader>h :previous<cr>
nnoremap <localleader>l :next<cr>
nnoremap <localleader>k :bprevious<cr>
nnoremap <localleader>j :bnext<cr>

" move around windows with leader key
nnoremap <silent><leader>k :wincmd k<cr>
nnoremap <silent><leader>j :wincmd j<cr>
nnoremap <silent><leader>h :wincmd h<cr>
nnoremap <silent><leader>l :wincmd l<cr>

" lookup
nnoremap <leader>F :call <sid>find(input("find /", "", "file_in_path"))<cr>
nnoremap <leader>f :call <sid>grep(input("grep /", "", "tag"))<cr>

vnoremap <leader>F :<c-u>call <sid>find(<sid>selectedText())<cr>
vnoremap <leader>f :<c-u>call <sid>grep(<sid>selectedText())<cr>

vnoremap <silent>* :<c-u>call <sid>findTextInBuffer("/", <sid>selectedText())<cr>n
vnoremap <silent># :<c-u>call <sid>findTextInBuffer("#", <sid>selectedText())<cr>n

command! -nargs=1 -complete=buffer Grep call <sid>grep(<q-args>)
command! -nargs=1 -complete=buffer Find call <sid>find(<q-args>)

" remap addition and substraction
nnoremap <A-a> <C-a>
nnoremap <A-x> <C-x>
vnoremap <A-a> <C-a>
vnoremap <A-x> <C-x>
vnoremap g<A-a> g<C-a>
vnoremap g<A-x> g<C-x>

"""""""""""""""""""""""""""""""""""" COLORS """""""""""""""""""""""""""""""""""<
hi ColorColumn  ctermbg=8
hi CtrlPMode1   ctermbg=0  ctermfg=3
hi DiffAdd      ctermbg=8  ctermfg=10 cterm=none
hi DiffChange   ctermbg=8  ctermfg=3  cterm=none
hi DiffDelete   ctermbg=8  ctermfg=9  cterm=none
hi DiffText     ctermbg=8  ctermfg=11 cterm=underline
hi Directory               ctermfg=4
hi FoldColumn   ctermbg=0  ctermfg=7
hi Folded       ctermbg=0  ctermfg=7  cterm=bold
hi NormalFloat  ctermbg=0
hi Pmenu        ctermbg=0  ctermfg=7
hi PmenuSbar    ctermbg=0  ctermfg=7
hi PmenuSel     ctermbg=8  ctermfg=15
hi QuickFixLine ctermbg=8
hi Search       ctermbg=8  ctermfg=11 cterm=bold
hi SignColumn   ctermbg=0
hi SpellBad     ctermbg=8
hi StatusLine                         cterm=bold
hi StatusLineNC ctermbg=0  ctermfg=0  cterm=none
hi TabLine      ctermbg=8  ctermfg=7  cterm=none
hi User1        ctermbg=3  ctermfg=0  cterm=bold
hi User2        ctermbg=0  ctermfg=15 cterm=bold
hi VertSplit    ctermbg=8  ctermfg=8
hi Visual       ctermbg=7  ctermfg=0

hi link TabLineFill StatusLineNC
hi link TabLineSel User1

" variable name
hi! Identifier   ctermfg=12 cterm=none
" function name
hi! Function     ctermfg=2  cterm=none
" generic preprocessor
hi! PreProc      ctermfg=5  cterm=none
" preprocessor #include
hi! Include      ctermfg=5  cterm=none
" preprocessor #define
hi! Define       ctermfg=5  cterm=bold
" same as define
hi! Macro        ctermfg=5  cterm=none
" preprocessor #if, #else, #endif, etc.
hi! PreCondit    ctermfg=5  cterm=none
" generic statement
hi! Statement    ctermfg=4  cterm=bold
" if, then, else, endif, swicth, etc.
hi! Conditional  ctermfg=4  cterm=bold
" for, do, while, etc.
hi! Repeat       ctermfg=4  cterm=bold
" case, default, etc.
hi! Label        ctermfg=4  cterm=bold
" try, catch, throw
hi! Exception    ctermfg=4  cterm=bold
" sizeof, "+", "*", etc.
hi! Operator     ctermfg=14 cterm=bold
" any other keyword
hi! Keyword      ctermfg=4  cterm=bold
" generic type
hi! Type         ctermfg=2  cterm=bold
" static, register, volatile, etc
hi! StorageClass ctermfg=2  cterm=none
" struct, union, enum, etc.
hi! Structure    ctermfg=2  cterm=none
" typedef
hi! Typedef      ctermfg=2  cterm=none
" character constant: 'c', '/n'
hi! Character    ctermfg=3  cterm=none
" string constant: "this is a string"
hi! String       ctermfg=3  cterm=none
" generic comment
hi! Comment      ctermfg=8  cterm=none
" generic constant
hi! Constant     ctermfg=7  cterm=none
" boolean constant: TRUE, false
hi! Boolean      ctermfg=7  cterm=bold
" number constant: 234, 0xff
hi! Number       ctermfg=7  cterm=bold
" floating point constant: 2.3e10
hi! Float        ctermfg=7  cterm=bold
