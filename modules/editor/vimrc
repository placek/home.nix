""""""""""""""""""""""""""""""""" ESSENTIALS """""""""""""""""""""""""""""""""""
filetype plugin indent on                                                      " for plugins to load correctly
syntax enable                                                                  " turn on syntax highlighting
set nocompatible                                                               " don't try to be vi compatible

"""""""""""""""""""""""""""""""""" SETTINGS """"""""""""""""""""""""""""""""""""
" interface
set cmdheight=1                                                                " set command line height
set foldcolumn=1                                                               " always show at least one cahr in fold column
set hlsearch                                                                   " highlight search
set laststatus=2                                                               " always show last status
set noshowmode                                                                 " do not show mode in command line
set showmatch                                                                  " highlight matching brackets
set signcolumn=yes                                                             " always show sign column
set showfulltag                                                                " show info about tag in completemenu
set showcmd                                                                    " always show the command opearator
set ruler                                                                      " show file stats
set number                                                                     " show line numbers
set nospell                                                                    " do not display spellchecking
set list listchars=tab:»\ ,nbsp:␣,trail:·,extends:›,precedes:‹                 " show blank characters
set wrap                                                                       " wrap a text on screen
set scrolloff=4                                                                " always show 4 lines before/after coursor
set shortmess+=a shortmess+=c                                                  " shorter messages

" behaviour
set autowrite                                                                  " autosave buffer when using jumps
set backspace=indent,eol,start                                                 " set the behavious of backspace
set clipboard=unnamedplus                                                      " linux standard clipboard
set encoding=utf-8                                                             " encoding
set termencoding=utf-8                                                         " encoding for terminal
set hidden                                                                     " allow hidden buffers
set incsearch                                                                  " show search results while typing regex
set matchpairs+=<:>                                                            " use % to jump between < and > as well
set mouse=a                                                                    " full mouse intagration
set undofile                                                                   " save history of the file
set nobackup                                                                   " no mess in the project
set noswapfile                                                                 " no problematic swap files
set undodir=/tmp/undodir                                                       " set the directory for undofiles

" completion
set omnifunc=syntaxcomplete#Complete                                           " set onmicomplete function
set completeopt=menuone,noselect                                               " on completion always show menu, but do not select anything

" diff options
set diffopt+=algorithm:minimal                                                 " most minimal diff possible
set diffopt+=indent-heuristic                                                  " indentation
set diffopt-=internal                                                          " don't use internal diff algorithm

" more natural splits
set splitbelow                                                                 " split below to current window
set splitright                                                                 " split right to current window

" indentation
set noshiftround                                                               " do not round indent to multiple of 2
set shiftwidth=2                                                               " indent size

" tabs into space
set expandtab                                                                  " tabs into spaces
set softtabstop=2                                                              " width of the tab in spaces
set tabstop=2                                                                  " tabs at 2 spaces

" text width
set textwidth=80                                                               " 80 columns wide text
set colorcolumn=80,160                                                         " a bar at 80 and 160 column

" gotta go fast!
set updatetime=300                                                             " CursorHold delay
set timeoutlen=1000 ttimeoutlen=0                                              " immediate escape key result
set ttyfast                                                                    " fast rendering

" autocomplete paths in command mode
set path+=**                                                                   " search down files into subdirectories
set wildmenu                                                                   " display all matching files on tab completion
set wildignore+=.git/,**/node_modules/**                                       " ignore files from unwanted directories
set wildmode=longest:full,full                                                 " match longest path fully matching pattern

" ctags
set tags+=.git/tags                                                            " add .git/tags file to scope

" status line
set statusline=%1*\ %{toupper(mode())}\ %2*\ %F:%l:%c%=
set statusline+=\ %Y\ %{LinterStatus()}\ %1*\ %m%r[%n]\ %{strlen(&fenc)?&fenc:'none'}\ 

autocmd InsertEnter,InsertLeave * set cul!

""""""""""""""""""""""""""""""""""" FUNCTIONS """"""""""""""""""""""""""""""""""
" returns a text under visual selection
function! s:selectedText()
  silent normal gv"vy
  let l:selection = getreg('v')
  let l:escaped   = escape(l:selection, '\/')
  let l:regexp    = substitute(l:escaped, "\n", "\\\\n", "g")
  normal \<Esc>
  return l:regexp
endfunction

" triggers a buffer search using a given query
function! s:findTextInBuffer(register, query)
  call setreg(a:register, "\\V" . a:query)
  normal n
endfunction

""""""""""""""""""""""""""""""""""" LEADERS """"""""""""""""""""""""""""""""""""
let g:mapleader      = "\<space>"                                              " main leader set to space
let g:maplocalleader = ","                                                     " local leader set to comma

"""""""""""""""""""""""""""""""""""" NETRW """""""""""""""""""""""""""""""""""""
" do not load shitty netrw
let g:loaded_netrwPlugin = 1
let g:loaded_netrw = 1

""""""""""""""""""""""""""""""""""" COPILOT """"""""""""""""""""""""""""""""""""
inoremap <c-up>   <Plug>(copilot-previous)
inoremap <c-down> <Plug>(copilot-next)
inoremap <c-left> <Plug>(copilot-dismiss)
inoremap <c-cr>   <Plug>(copilot-suggest)
imap <silent><script><expr> <c-right> copilot#Accept("\<cr>")
let g:copilot_no_tab_map = v:true

"""""""""""""""""""""""""""""""""""" CTRLP """""""""""""""""""""""""""""""""""""
nnoremap <leader><leader> :CtrlP<cr>
let g:ctrlp_match_window = 'bottom,order:btt,min:1,max:10,results:50'
let g:ctrlp_show_hidden = 1
let g:ctrlp_map = '<leader><leader>'
let g:ctrlp_cmd = 'CtrlPLastMode'
let g:ctrlp_switch_buffer = 'etvh'
let g:ctrlp_open_multiple_files = '2vjr'
let g:ctrlp_user_command = {
  \ 'types': {
    \ 1: ['.git', 'cd %s && git ls-files'],
    \ },
  \ 'fallback': 'find %s -type f'
  \ }

""""""""""""""""""""""""""""""""""""" TAGS """""""""""""""""""""""""""""""""""""
command! -nargs=0 MakeTags call job_start('git ctags')

autocmd! BufWritePost * MakeTags

nnoremap gd g<c-]>
vnoremap gd g<c-]>

""""""""""""""""""""""""""""""""""""" MAKE """""""""""""""""""""""""""""""""""""
nnoremap <leader><M-'> :lmake %:t:r<cr>
nnoremap <leader>' :lmake %:.<cr>
nnoremap <leader>" :lmake %:.:<c-r>=line('.')<cr><cr>

augroup MakePrg
  autocmd BufEnter *_spec.rb setlocal makeprg=rspec

  autocmd BufEnter *.test.js setlocal makeprg=yarn\ jest efm=%.%#\ at\ %f:%l:%c,%.%#\ at\ %.%#(%f:%l:%c)
  autocmd BufEnter *.test.ts setlocal makeprg=yarn\ jest efm=%.%#\ at\ %f:%l:%c,%.%#\ at\ %.%#(%f:%l:%c)
  autocmd BufEnter *.test.jsx setlocal makeprg=yarn\ jest efm=%.%#\ at\ %f:%l:%c,%.%#\ at\ %.%#(%f:%l:%c)
  autocmd BufEnter *.test.tsx setlocal makeprg=yarn\ jest efm=%.%#\ at\ %f:%l:%c,%.%#\ at\ %.%#(%f:%l:%c)
augroup END

""""""""""""""""""""""""""""""""""" ALTFILE """"""""""""""""""""""""""""""""""""
function! s:altFile()
  if exists("b:altfile")
    if bufwinid(b:altfile) > -1
      call win_gotoid(bufwinid(b:altfile))
    else
      silent execute ":vs" b:altfile
    endif
  endif
endfunction

nnoremap <localleader><leader> :call <sid>altFile()<cr>

augroup AltFile
  autocmd BufReadPost *.rb call setbufvar(expand('%'), 'altfile', expand('%:.:s/^app/spec/:s/\.rb$/_spec.rb/'))
  autocmd BufReadPost *_spec.rb call setbufvar(expand('%'), 'altfile', expand('%:.:s/^spec/app/:s/_spec\.rb$/.rb/'))

  autocmd BufReadPost *.js  call setbufvar(expand('%'), 'altfile', expand('%:.:s/\.js$/.test.js/'))
  autocmd BufReadPost *.ts  call setbufvar(expand('%'), 'altfile', expand('%:.:s/\.ts$/.test.ts/'))
  autocmd BufReadPost *.jsx call setbufvar(expand('%'), 'altfile', expand('%:.:s/\.jsx$/.test.jsx/'))
  autocmd BufReadPost *.tsx call setbufvar(expand('%'), 'altfile', expand('%:.:s/\.tsx$/.test.tsx/'))
  autocmd BufReadPost *.test.js  call setbufvar(expand('%'), 'altfile', expand('%:.:s/\.test\.js$/.js/'))
  autocmd BufReadPost *.test.ts  call setbufvar(expand('%'), 'altfile', expand('%:.:s/\.test\.ts$/.ts/'))
  autocmd BufReadPost *.test.jsx call setbufvar(expand('%'), 'altfile', expand('%:.:s/\.test\.jsx$/.jsx/'))
  autocmd BufReadPost *.test.tsx call setbufvar(expand('%'), 'altfile', expand('%:.:s/\.test\.tsx$/.tsx/'))
augroup END

""""""""""""""""""""""""""""""""""""" ALE """"""""""""""""""""""""""""""""""""""
function! LinterStatus() abort
  let l:counts = ale#statusline#Count(bufnr(''))
  let l:all_errors = l:counts.error + l:counts.style_error
  let l:all_non_errors = l:counts.total - l:all_errors
  return l:counts.total == 0 ? 'OK' : printf('%dW %dE', all_non_errors, all_errors)
endfunction

let g:ale_close_preview_on_insert = 1
let g:ale_completion_enabled = 1
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_floating_preview = 1
let g:ale_floating_window_border = ['│', '─', '╭', '╮', '╯', '╰', '│', '─']
let g:ale_sign_column_always = 1
let g:ale_sign_error = 'E'
let g:ale_sign_info = 'I'
let g:ale_sign_style_error = 'ES'
let g:ale_sign_style_warning = 'WS'
let g:ale_sign_warning = 'W'
let g:ale_virtualtext_cursor = 'current'

set omnifunc=ale#completion#OmniFunc
inoremap <tab> <c-n>
inoremap <c-tab> <c-x><c-o>

nnoremap <silent>[e     :ALEPreviousWrap<cr>
nnoremap <silent>]e     :ALENextWrap<cr>
nnoremap K              :ALEHover<cr>

nnoremap <localleader>, :ALEDetail<cr>
nnoremap <localleader>a :ALECodeAction<cr>
nnoremap <localleader>d :ALEGoToDefinition<cr>
nnoremap <localleader>D :ALEGoToTypeDefinition<cr>
nnoremap <localleader>f :ALEFix<cr>
nnoremap <localleader>i :ALEInfo<cr>
nnoremap <localleader>I :ALEToggle<cr>
nnoremap <localleader>l :ALEPopulateLocList<cr>
nnoremap <localleader>r :ALEFindReferences<cr>

""""""""""""""""""""""""""""""""""" COMMENT """"""""""""""""""""""""""""""""""""
function! s:commentToggle()
  let line = getline('.')
  if match(l:line, '^\s*'.substitute(&commentstring, '%s', '.*', '')) >= 0
    let l:target = substitute(l:line, '^\s*\zs'.substitute(&commentstring, '%s', '', ''), '', '')
  else
    let l:target = printf(&commentstring, l:line)
  endif
  s/^.*$/\=l:target/
endfunction

nnoremap <silent>gc :call <sid>commentToggle()<cr>
vnoremap <silent>gc :call <sid>commentToggle()<cr>

""""""""""""""""""""""""""""""""""" QUICKFIX """""""""""""""""""""""""""""""""""
function! s:openQuickfix(new_split_cmd)
  let l:qf_idx = line('.')
  wincmd p
  execute a:new_split_cmd
  execute l:qf_idx . 'cc'
endfunction

autocmd FileType qf nnoremap <buffer> <c-v> :call <sid>openQuickfix("vnew")<cr>
autocmd FileType qf nnoremap <buffer> <c-x> :call <sid>openQuickfix("split")<cr>
autocmd Filetype qf setlocal statusline=%1*%f%2*

""""""""""""""""""""""""""""""""""""" TODO """""""""""""""""""""""""""""""""""""
function! s:toggleTodoFile()
  let file = trim(system('git config todo.file'))
  if buflisted(bufname(l:file))
    if !win_gotoid(bufwinid(l:file))
      execute ":split " l:file
    endif
  else
    execute ":split " l:file
  endif
endfunction

nnoremap <leader>x :call <sid>toggleTodoFile()<cr>

""""""""""""""""""""""""""""""""""" FUGITIVE """""""""""""""""""""""""""""""""""
function! s:toggleFugitive()
  if buflisted(bufname('fugitive:///*/.git//$'))
    execute ":bdelete" bufname('fugitive:///*/.git//$')
  else
    Git
    resize 10
    setlocal winfixheight
    setlocal nonumber
    setlocal norelativenumber
  endif
endfunction

function! s:pickaxe(query)
  if !empty(a:query)
    execute ":G log -p -G " a:query
    call setreg("/", "\\V" . a:query)
  endif
endfunction

autocmd! FileType fugitive nnoremap cW :<c-u>Git commit --no-verify --message "WIP <c-r>=trim(system('curl -Ls whatthecommit.com/index.txt'))<cr>"
autocmd! FileType fugitive nnoremap rI :<c-u>Git rebase --interactive <c-r>=trim(system('git merge-base origin/HEAD HEAD'))<cr>

command! -nargs=0 Gchanges G log --pretty=oneline origin/HEAD.. | resize 10
command! -nargs=1 -complete=buffer Pickaxe call <sid>pickaxe(<q-args>)

nnoremap <leader>b :Git blame<cr>
nnoremap <leader>B :G branch<cr>
nnoremap <leader>e :Gedit<cr>
nnoremap <leader>g :call <sid>toggleFugitive()<cr>
nnoremap <leader>f :G pull -f<cr>
nnoremap <leader>F :G push -f<cr>
nnoremap <leader>G :Gchanges<cr>
nnoremap <leader>l :GcLog<cr>
nnoremap <leader>L :0GlLog<cr>
nnoremap <leader>p :G pull<cr>
nnoremap <leader>P :G push<cr>
nnoremap <leader>s :call <sid>pickaxe(input("pickaxe /", "", "tag"))<cr>
vnoremap <leader>s :<c-u>call <sid>pickaxe(<sid>selectedText())<cr>

command! -nargs=0 W Gwrite
command! -nargs=0 E Gedit
command! -nargs=0 D GDelete

function! s:gitPruneFile()
  let file = expand('%')
  let branch_base = trim(system('git merge-base origin/HEAD HEAD'))
  execute "!git filter-branch --prune-empty --force --tree-filter 'rm -f " . l:file . "' " . l:branch_base . "..HEAD"
endfunction

command! -nargs=0 GPrune :call <sid>gitPruneFile()

"""""""""""""""""""""""""""""""""" GITGUTTER """""""""""""""""""""""""""""""""""
nnoremap ]h :GitGutterNextHunk<cr>
nnoremap [h :GitGutterPrevHunk<cr>

"""""""""""""""""""""""""""""""" EXPAND REGION """""""""""""""""""""""""""""""""
vmap v     <Plug>(expand_region_expand)
vmap <C-v> <Plug>(expand_region_shrink)

"""""""""""""""""""""""""""""""""" BLAMELINE """""""""""""""""""""""""""""""""""
hi BlameLine ctermfg=8
call prop_type_add('blame_line', { 'highlight': 'BlameLine' })

function! BlameLineHandler(channel, msg)
  let text = substitute(trim(a:msg), '^\(\w\+\)\s\+(\(.\{-}\)).*', '\1 \2', 'g')
  call prop_remove({ 'type': 'blame_line' }, 1, line('$'))
  call prop_add(line('.'), 0, { 'text': l:text, 'type': 'blame_line', 'text_align': 'right' })
endfunc

function! s:blameLine()
  if isdirectory(".git")
    let line = line('.')
    let file = expand('%')
    let cmd = 'git blame --date=relative -L' . l:line . ',' . l:line . ' ' . l:file
    call job_start(l:cmd, { 'out_cb': 'BlameLineHandler' })
  endif
endfunction

autocmd CursorHold * call <sid>blameLine()

"""""""""""""""""""""""""""""""""""" UTILS """""""""""""""""""""""""""""""""""""
" some appearance togglable settings
nnoremap <leader>1 :set relativenumber!<cr>
nnoremap <leader>2 :set hlsearch!<cr>
nnoremap <leader>3 :set spell!<cr>

" make folds and return to manual foldmethod
function! s:makeFolds()
  setlocal foldmethod=indent
  norm zR
  setlocal foldmethod=manual
endfunction

set foldmethod=manual
nnoremap <leader>4 :call <sid>makeFolds()<cr>

" terminal-mode
nnoremap <leader>t :vertical terminal<cr>
tnoremap <esc> <c-\><c-n>

" cnake case to camel case and back
nnoremap <silent>crs :keeppatterns s:<c-r><c-w>:\=substitute(submatch(0), '\(\u\?\l\+\)\(\u\)', '\l\1_\l\2', 'g'):<cr><c-o>
nnoremap <silent>crc :keeppatterns s:<c-r><c-w>:\=substitute(submatch(0),'\(\l\+\)_\?', '\u\1', 'g'):<cr><c-o>

" toggle loclist list
function! s:toggleLocList()
  if empty(filter(getwininfo(), 'v:val.loclist'))
    lopen
  else
    lclose
  endif
endfunction

nnoremap <silent><leader>Q :call <sid>toggleLocList()<cr>

" toggle quickfix list
function! s:toggleQuickFix()
  if empty(filter(getwininfo(), 'v:val.quickfix'))
    copen
  else
    cclose
  endif
endfunction

nnoremap <silent><leader>q :call <sid>toggleQuickFix()<cr>

" use `open` command to open a current buffer
command! -nargs=0 Open !open %

" leave only the current buffer - delete others
command! -nargs=0 BufOnly execute '%bdelete|edit #|normal `"'

" undo sequence for space, dot and newline
inoremap <space> <C-G>u<space>
inoremap . <C-G>u.
inoremap <cr> <C-G>u<cr>

" `<C-p>` that acts like `p`, but not change the `+` register
vnoremap <C-p> "pdp
vnoremap <C-P> "pdP

"""""""""""""""""""""""""""""""""" NAVIGATION """"""""""""""""""""""""""""""""""
" triggers a grep on query and opens quickfix list
function! s:grep(query)
  if !empty(a:query)
    execute "silent Ggrep \"" . a:query . "\" | copen"
  endif
endfunction

" finds a file using git ls-files or find command
function! s:find(query)
  if !empty(a:query)
    if isdirectory(".git")
      execute "silent cexpr system('git ls-files \"**" . a:query . "*\" | sed \"s/.*/&:1:1/\"') | copen"
    else
      execute "silent cexpr system('find . -type f -printf \"%p:1:1\\n\" \"*" . a:query . "*\"') | copen"
    endif
  endif
endfunction

" simple jump commands
nnoremap <silent>]a :next<cr>
nnoremap <silent>[a :previous<cr>
nnoremap <silent>]b :bnext<cr>
nnoremap <silent>[b :bprevious<cr>
nnoremap <silent>]c :cnext<cr>
nnoremap <silent>[c :cprevious<cr>
nnoremap <silent>]l :lnext<cr>
nnoremap <silent>[l :lprevious<cr>
nnoremap <silent>]t :tabnext<cr>
nnoremap <silent>[t :tabprevious<cr>

" move around windows with leader key
nnoremap <silent><leader><up>    <c-w><up>
nnoremap <silent><leader><down>  <c-w><down>
nnoremap <silent><leader><left>  <c-w><left>
nnoremap <silent><leader><right> <c-w><right>

" lookup
nnoremap <leader>\ :call <sid>find(input("find /", "", "file_in_path"))<cr>
nnoremap <leader>/ :call <sid>grep(input("grep /", "", "tag"))<cr>

vnoremap <leader>\ :<c-u>call <sid>find(<sid>selectedText())<cr>
vnoremap <leader>/ :<c-u>call <sid>grep(<sid>selectedText())<cr>

vnoremap <silent>* :<c-u>call <sid>findTextInBuffer("/", <sid>selectedText())<cr>n
vnoremap <silent># :<c-u>call <sid>findTextInBuffer("#"), <sid>selectedText())<cr>n

command! -nargs=1 -complete=buffer Grep call <sid>grep(<q-args>)
command! -nargs=1 -complete=buffer Find call <sid>find(<q-args>)

"""""""""""""""""""""""""""""""""""" COLORS """"""""""""""""""""""""""""""""""""
hi Boolean                              ctermfg=13            cterm=bold
hi ColorColumn                          ctermbg=8
hi Comment                                         ctermfg=7
hi CtrlPMode1                           ctermbg=0  ctermfg=3
hi DiffAdd                              ctermbg=8  ctermfg=10 cterm=none
hi DiffChange                           ctermbg=8  ctermfg=3  cterm=none
hi DiffDelete                           ctermbg=8  ctermfg=9  cterm=none
hi DiffText                             ctermbg=8  ctermfg=11 cterm=underline
hi Directory                                       ctermfg=4
hi FoldColumn                           ctermbg=0  ctermfg=7
hi Folded                               ctermbg=0  ctermfg=7  cterm=bold
hi NormalFloat                          ctermbg=0
hi Pmenu                                ctermbg=0  ctermfg=7
hi PmenuSbar                            ctermbg=0  ctermfg=7
hi PmenuSel                             ctermbg=8  ctermfg=15
hi QuickFixLine                         ctermbg=8
hi Search                               ctermbg=8  ctermfg=11 cterm=bold
hi SignColumn                           ctermbg=0
hi SpellBad                             ctermbg=8
hi StatusLine                                                 cterm=bold
hi StatusLineNC                         ctermbg=0  ctermfg=0  cterm=none
hi String                               ctermfg=3
hi TabLine                              ctermbg=8  ctermfg=7  cterm=none
hi User1                                ctermbg=3  ctermfg=0  cterm=bold
hi User2                                ctermbg=0  ctermfg=15 cterm=bold
hi VertSplit                            ctermbg=8  ctermfg=8
hi Visual                               ctermbg=7  ctermfg=0

hi ALEVirtualTextError                             ctermfg=1
hi ALEVirtualTextWarning                           ctermfg=4
hi ALEVirtualTextInfo                              ctermfg=5
hi ALEError                             ctermbg=0  ctermfg=1  cterm=underline
hi ALEErrorSign                         ctermbg=0  ctermfg=1
hi ALEWarning                           ctermbg=0  ctermfg=4  cterm=underline
hi ALEWarningSign                       ctermbg=0  ctermfg=4
hi ALEInfo                              ctermbg=0  ctermfg=5  cterm=underline
hi ALEInfoSign                          ctermbg=0  ctermfg=5

hi link CtrlPMode2 User1
hi link TabLineFill StatusLineNC
hi link TabLineSel User1
